<?php

/**
 * Implements hook_install_tasks_alter().
 */
function example_install_tasks_alter(&$tasks, $install_state) {
  // we need to link our local settings right after the settings.php file creation
  // we'll try to move it just before install_system_module
  if (!array_key_exists('link_local_configuration', $tasks)) {
    $found = FALSE;
    $new_tasks = array();
    foreach ($tasks as $task_name => $taskdef) {
      if ('install_system_module' == $task_name) {
        $new_tasks[$task_name] = $taskdef;
        $found = TRUE;
        $new_tasks['link_local_configuration'] = $tasks['link_local_configuration'];
      }
      else {
        if ('link_local_configuration' !== $task_name) {
          $new_tasks[$task_name] = $taskdef;
        }
      }
    }
    $tasks = $new_tasks;
  }

  // While we are working on an installation we tell Drupal we have no time limit for installation
  drupal_set_time_limit(0);
}

/**
 * Implements hook_install_tasks()
 */
function example_install_tasks($install_state) {
  $tasks = array();
  // Add a link to local conf file
  $tasks['link_local_configuration'] = array(
    'display_name' => st('Links local settings.php file'),
    'display'      => FALSE,
    'type'         => 'normal',
    'run'          => ($install_state['settings_verified']) ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    'function'     => '_example_install_local_settings_link',
  );
  return $tasks;
}

/**
 * Linking local settings.php extension file on the bottom of the settings.php file
 *
 * This was once done after the install process in a batch script BUT
 * the install process final step (install_finished) adds a drupal_cron call
 * which may lead to bad things if our settings are not set (let's say for example
 * theses extended settings contains the solr server settingsor or php-fpm directories)
 */
function _example_install_local_settings_link() {
  $settings_file = 'sites/default/settings.php';
  drupal_install_fix_file(DRUPAL_ROOT . '/' . $settings_file,
    FILE_READABLE | FILE_WRITABLE);
  $buffer = NULL;
  $found = FALSE;
  if ($fp = fopen(DRUPAL_ROOT . '/' . $settings_file, 'r')) {
    // Step line by line through settings.php.
    while (!feof($fp) && !$found) {
      $line = fgets($fp);
      $buffer .= $line;
      if (FALSE !== strpos($line, 'localsettingsfile')) {
        // this setting file is already activating our local settings stop here
        $found = TRUE;
      }
    }
    fclose($fp);
    if (!$found) {
      // Add our code to link optionnal settings
      $buffer .= '$localsettingsfile = DRUPAL_ROOT . "/sites/default/common.settings.php";' . "\n" . 'if (file_exists($localsettingsfile)) {' . "\n" . '  include_once($localsettingsfile);' . "\n" . '}' . "\n";

      $fp = fopen(DRUPAL_ROOT . '/' . $settings_file, 'w');
      drupal_install_fix_file(DRUPAL_ROOT . '/' . $settings_file,
        FILE_READABLE | FILE_NOT_WRITABLE);
      if ($fp && fwrite($fp, $buffer) === FALSE) {
        throw new Exception(st('Failed to modify %settings (adding local link). Verify the file permissions.',
            array('%settings' => $settings_file)));
      }
    }
    // load theses settings if they are available
    $localsettingsfile = DRUPAL_ROOT . "/sites/default/common.settings.php";
    if (file_exists($localsettingsfile)) {
      global $conf;
      include_once($localsettingsfile);
      // hack
      unset($conf['session_inc']);
      unset($conf['lock_inc']);
    }
  }
  else {
    throw new Exception(st('Failed to open %settings (adding local link). Verify the file permissions.',
        array('%settings' => $settings_file)));
  }

  // Just go to next step
  return NULL;
}

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function example_install() {
/*
  // Select language selected for the install
  global $install_state;

  // Add text format.
  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // Ckeditor link filter.
      'ckeditor_link_filter' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // URL filter.
      'filter_url' => array(
        'weight' => 5,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Create Footer menu
  $menu = array(
    'menu_name' => 'footer',
    'title' => st('Footer'),
  );
  menu_save($menu);

  // Set menu sources
  variable_set('menu_main_links_source', 'main-menu');
  variable_set('menu_secondary_links_source', 'footer');

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'bartik');
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'title' => '',
      'cache' => DRUPAL_NO_CACHE,
    ),
    array(
      'module' => 'menu',
      'delta' => 'footer',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'footer',
      'pages' => '',
      'title' => '<none>',
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'title', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
  
  // Enable default permissions for system roles.
  $full_html_permission = filter_permission_name($full_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $full_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 3;
  user_role_save($admin_role);
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);
  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create "Page" content type
  $page = array(
    'type' => 'page',
    'name' => st('Basic page'),
    'base' => 'node_content',
    'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
    'custom' => 1,
    'modified' => 1,
    'locked' => 1,
  );
  $page = node_type_set_defaults($page);
  node_type_save($page);
  node_add_body_field($page);

  // Access rights
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Default "Basic page" to unpublished (publishcontent module is there)
  // But enable revisions by default.
  variable_set('node_options_page', array('revision'));
  // Deny comments on "Basic page"
  variable_set('comment_page', 0);
  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Don't allow visitor account creation.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);

  // Pathauto basic node configuration
  variable_set('pathauto_node_pattern', '[node:content-type:machine-name]/[node:title]');
  // We should have 'hackable' URLs (@See http://www.nngroup.com/articles/url-as-ui/)
  variable_set('pathauto_node_page_pattern', '[node:menu-link:parents:join-path]/[node:title]');

  // Use a higher locale cache, so long strings are in there too!
  variable_set('locale_cache_length', 65535);

  // Prepare eventually i18n
  variable_set('i18n_string_source_language', 'en');

  // Date settings
  variable_set('configurable_timezones', 0);
  variable_set('date_first_day', '1');

  // Image toolkit settings
  variable_set('image_jpeg_quality', 100);

  // Only notify on Security Issue(s).
  variable_set('update_notification_threshold', 'security');
  variable_set('update_check_frequency', '7');
*/
  // This is commented, you MAY use that here, but, REALLY, all this MUST be set in seetings files
  // and not in the database, really.
  // Performance
  //variable_set('cron_safe_threshold', '0');
  //variable_set('cache', '1');
  //variable_set('block_cache', '1');
  //variable_set('preprocess_css', '1');
  //variable_set('preprocess_js', '1');
  // Better done by the web server.
  //variable_set('page_compression', '0');
  // Prevents feature for always rebuilding.
  //variable_set('features_rebuild_on_flush', 0);

  //variable_set('admin_theme', 'seven');
  //variable_set('node_admin_theme', '1');

  // Prevent people from trying to install modules.
  //variable_set('allow_authorize_operations', FALSE);
}
