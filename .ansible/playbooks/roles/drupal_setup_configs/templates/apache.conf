<VirtualHost *:80>
    ServerName myproject.company.com

    RewriteEngine On

    # Test maintenance mod with file trigger <docroot>/sites/default/files/MAINTENANCE
    # Ff this file exists, the website goes into maintenance mode
    # @see also ErrorDocument section at the end of this file
    RewriteCond %{DOCUMENT_ROOT}/maintenance.html -f
    RewriteCond %{DOCUMENT_ROOT}/sites/default/files/MAINTENANCE -f
    RewriteCond %{ENV:REDIRECT_STATUS} !=503
    RewriteRule ^.*$ /maintenance.html [R=503,L]

    # PHP Handler -----------------------------
    # original PHP Fascgi RewriteRule:
    # ProxyPassMatch "^/(.*\.php(/.*)?)$" "unix:/var/run/php/php7.1-fpm.sock|fcgi://localhost/home/company/myproject-website/www"
    # Problems:
    # - wrong docroot (path is localhost/home/company/myproject-website/project/www with a project in path)
    # - ProxyPassMatch is applied before any other RewriteRule, so we cannot add rules which prevents php execution
    # - too wide, we only want index.php to be executed, any other php file should be considered a backdoor
    #   unless proven wrong (note that a nice fix would be having only index.php in DocumentRoot, but Drupal devs are
    #   morons and will have to wait ten more years before this).
    # fix: use a rewriteRule with [P]/[Proxy] flag to do the same without using ProxyPassMatch or use a SetHandler
    <Proxy unix:/var/run/php/php7.1-fpm.sock|fcgi://company-myproject-php-pool>
       ProxySet connectiontimeout=5 timeout=300
       <IfVersion >= 2.4.26>
           ProxyFCGIBackendType FPM
       </Ifversion>
    </Proxy>

    # Uncomment to debug mod_rewrite and mod_proxy
    # LogLevel alert rewrite:trace6 proxy:trace6
LogLevel alert headers:trace6

    # PHP Handler to Fascgi, WITHOUT PROXYPASSMATCH!
    # P: Proxy: here we use Proxy, but AFTER other rewriteRules, something ProxyPass would not do
    # (ProxyPass and proxyPassMatch would be played BEFORE rewrite rules)
    # L: Last: stop playing with mod_rewrite if you reach this point
    # Note that only /index.php is supported currently by PHP, any other PHP file would be a simple echo of SOURCES
    # to avoid this effect we use other rewrite rules like RULE #3
    RewriteRule ^/(index\.php)$ unix:/var/run/php/php7.1-fpm.sock|fcgi://company-myproject-php-pool//home/company/myproject-website/project/www/$1 [P,L,QSA]
    #-------------------------------------------

    # Root of filesystem -------------------------- 

    <Directory />
       Require all denied
       # No .htaccess checks, on the whole disk
       AllowOverride None

       #.svn & .git directories must be avoided!!
       RedirectMatch 404 /.svn(/|$)
       RedirectMatch 404 /.git(/|$)
    </Directory>

    # Document Root Directory ----------------------

    DocumentRoot /home/company/myproject-website/project/www

    <Directory /home/company/myproject-website/project/www>
        AllowOverride None
        Options +FollowSymLinks -Indexes -Multiviews
        Require all granted

        DirectoryIndex index.php

        # Drupal heresy
        <FilesMatch "\.(yml|engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)(~|\.sw[op]|\.bak|\.orig|\.save)?$|^(\..*|Entries.*|Repository|Root|Tag|Template)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig\.save)$">
           Require all denied
        </FilesMatch>

        # Force simple error message for requests for non-existent favicon.ico.
        <Files favicon.ico>
            # There is no end quote below, for compatibility with Apache 1.3.
            ErrorDocument 404 "The requested file favicon.ico was not found.
        </Files>

        # Make Drupal handle any 404 errors.
        ErrorDocument 404 /index.php

        # Requires mod_expires to be enabled.
        <IfModule mod_expires.c>
            # Enable expirations.
            ExpiresActive On
            # Cache all files for 2 weeks after access (A).
            ExpiresDefault A1209600
            <FilesMatch \.php$>
                 # Do not allow PHP scripts to be cached unless they explicitly send cache
                 # headers themselves. Otherwise all scripts would have to overwrite the
                 # headers set by mod_expires if they want another caching behavior. This may
                 # fail if an error occurs early in the bootstrap process, and it may cause
                 # problems if a non-Drupal PHP file is installed in a subdirectory.
                 ExpiresActive Off
           </FilesMatch>
        </IfModule>

        # Various rewrite rules.
        # SECURITY --- PHP restriction on 99% of files, only index.php is allowed
        # -- this may break bad ajax calls, or some autocompletes, if you want exceptions
        # on this default security rule see rule2, ... or comment rule 1 but you'll loose
        # a good security restriction against backdoors


        #cf https://www.drupal.org/SA-CORE-2015-003
        ######### START RULE 1 ##################################
        # clean url is activated so ALL urls
        # MUST be accessed on /too/titi and MUSN'T be accessed on index.php?q=/toto/titi
        # main reason is that applying url rules (like restricting /admin access is far easier
        # in the clean url form than in parameter form
        # WARNING: need to alter any 'q' parameter that could be present
        # on original QUERY_STRING (part after the ?), or something
        # like /toto?q=admin could become a q=toto&q=admin
        # which is finally a q=admin, so we do not restrict
        # this rule to index.php
        #########################################################
        # WARNING: must prevent real internal redirect of :
        # /toto/titi to q=/toto/titi (done in rule 2)
        # to be forbidden, so the rule apply only
        # if the rewriting process is starting
        RewriteCond %{ENV:REDIRECT_STATUS} ^$

        # detect non-blank QUERY_STRING (some parameters are present after the ?)
        # else we have nothing to fear about blank queries
        RewriteCond %{QUERY_STRING} . [NC]

        # we prevent any query with a q= parameter
        RewriteCond %{QUERY_STRING} (^|&|%26|%20)(q|Q|%71|%51)(=|%3D). [NC]

        # 403 FORBIDDEN !
        RewriteRule .* - [F,L]
        ########## END RULE 1 ###################

        ########## START RULE 2 ###################
        # Clean url handling
        # for things which aren't real files or dir then
        # take the given url and giv it to index.php?q=...
        ###########################################
        # all url that didn't match ALL previous rewriteCond are still there
        # squeeze real files or directories, if they really exists 
        # then Drupal won't be called
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d

        # do not handle the favicon with Drupal bootstrap
        # comment if you want it
        RewriteCond %{REQUEST_URI} !=/favicon.ico

        # put everything still there to Drupal index.php
        # [L]= stop rewriting here for matching rules
        # [QSA]=Appends any query string created in the rewrite target 
        # to any query string that was in the original request URL
        RewriteRule ^ index.php [L,QSA]
        ########## END RULE 2 ###################

        ########## START RULE 3 ###################
        # deny direct access to php files which aren't
        # /index.php or (... your list goes here ...)
        # (like an injected phpinfo.php)
        ###########################################
        RewriteCond %{ENV:REDIRECT_STATUS} ^$
        RewriteCond %{REQUEST_FILENAME} -f
        RewriteCond %{REQUEST_FILENAME} .*.php
        #NOPE: RewriteCond %{REQUEST_FILENAME} !(update.php|index.php|install.php|xmlrpc.php|cron.php)
        RewriteCond %{REQUEST_FILENAME} !(index.php)
        RewriteRule .* - [F,L]
        ########## END RULE 3 ###################

       # other rules from Official Drupal (@see .htaccess in ww dir for recent rules, here .htaccess
       # are not applied, so we copy back some of these rules

       # Set "protossl" to "s" if we were accessed via https://.  This is used later
       # if you enable "www." stripping or enforcement, in order to ensure that
       # you don't bounce between http and https.
       RewriteRule ^ - [E=protossl]
       RewriteCond %{HTTPS} on
       RewriteRule ^ - [E=protossl:s]

       # Make sure Authorization HTTP header is available to PHP
       # even when running as CGI or FastCGI.
       RewriteRule ^ - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

       # Block access to "hidden" directories whose names begin with a period. This
       # includes directories used by version control systems such as Subversion or
       # Git to store control files. Files whose names begin with a period, as well
       # as the control files used by CVS, are protected by the FilesMatch directive
       # above.
       #
       # NOTE: This only works when mod_rewrite is loaded. Without mod_rewrite, it is
       # not possible to block access to entire directories from .htaccess because
       # <DirectoryMatch> is not allowed here.
       #
       # If you do not have mod_rewrite installed, you should remove these
       # directories from your webroot or otherwise protect them from being
       # downloaded.
       RewriteRule "/\.|^\.(?!well-known/)" - [F]

       # Add correct encoding for SVGZ.
       AddType image/svg+xml svg svgz
       AddEncoding gzip svgz

       # Various header fixes.
       <IfModule mod_headers.c>
           # Disable content sniffing, since it's an attack vector.
           Header always set X-Content-Type-Options nosniff
           # Disable Proxy header, since it's an attack vector.
           RequestHeader unset Proxy
        </IfModule>

       # Rules to correctly serve gzip compressed CSS and JS files.
       # Requires both mod_rewrite and mod_headers to be enabled.
       <IfModule mod_headers.c>
           # Serve gzip compressed CSS files if they exist and the client accepts gzip.
           RewriteCond %{HTTP:Accept-encoding} gzip
           RewriteCond %{REQUEST_FILENAME}\.gz -s
           RewriteRule ^(.*)\.css $1\.css\.gz [QSA]

           # Serve gzip compressed JS files if they exist and the client accepts gzip.
           RewriteCond %{HTTP:Accept-encoding} gzip
           RewriteCond %{REQUEST_FILENAME}\.gz -s
           RewriteRule ^(.*)\.js $1\.js\.gz [QSA]
 
           # Serve correct content types, and prevent mod_deflate double gzip.
           RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
           RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]

           <FilesMatch "(\.js\.gz|\.css\.gz)$">
               # Serve correct encoding type.
               Header set Content-Encoding gzip
               # Force proxies to cache gzipped & non-gzipped css/js files separately.
               Header append Vary Accept-Encoding
           </FilesMatch>
        </IfModule>

    </Directory>  # End of DocumentRoot directory

    # backport of .htaccess from core:
    <Location /core/profiles/demo_umami/modules/demo_umami_content/default_content/>
        Require all denied
    </Location>


    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\" %D" combined_with_response_time
    ErrorLog ${APACHE_LOG_DIR}/myproject.company.com-error.log
    CustomLog ${APACHE_LOG_DIR}/myproject.company.com.log combined_with_response_time

    # makina : commented as I think it's already covered
    # SetEnvIf Authorization .+ HTTP_AUTHORIZATION=$0


    Include conf-available/prod_tuning.conf

    # This MUST be defined AFTER prod_tuning.conf inclusion
    ErrorDocument 503 /maintenance.html
    <IfModule mod_headers.c>
        <Files "maintenance.html">
            Header always Set Retry-After "60"
            Header always Set Cache-Control "max-age=0, no-store"
        </Files>
    </IfModule>

</VirtualHost>
# vim:set ft=apache: #
