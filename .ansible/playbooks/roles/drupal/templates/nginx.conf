# -*- mode: nginx; mode: flyspell-prog;  ispell-local-dictionary: "american" -*-
{% set ddata = cops_drupal_vars %}
{% set data = ddata %}

set $http_x_ssl $http_x_ssl_resolved;

# php-fpm monitoring status page
location = /fpmstatus {
    auth_basic off;
    if ($dont_show_fpm_status) {
        return 404;
    }
    include fastcgi_fpm_drupal.conf;
    fastcgi_pass {{data.nginx.upstream_name}};
}

## The ping page is at /ping and returns the string configured at the php-fpm level.
## Also only local network connections (loopback and LAN) are permitted.
location = /ping {
    auth_basic off;
    if ($dont_show_fpm_status) {
        return 404;
    }
    include fastcgi_fpm_drupal.conf;
    fastcgi_pass {{data.nginx.upstream_name}};
}

# maintenance routine
error_page 503 @maintenance;
location @maintenance {
    add_header Vary 'Accept-Encoding';
    add_header Cache-Control 'no-cache, must-revalidate, post-check=0, pre-check=0' always;
    add_header Expires 'Sun, 19 Nov 1978 05:00:00 GMT' always;
    add_header Retry-After 60 always;
    rewrite ^(.*)$ {{data.nginx.maintenance_page}} break;
}

# The 'default' location.
gzip              on;
gzip_buffers      16 8k;
gzip_comp_level   1;
gzip_http_version 1.1;
gzip_min_length   10;
gzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon application/vnd.ms-fontobject font/opentype application/x-font-ttf application/javascript;
gzip_vary         on;
gzip_proxied      any; # Compression for all requests.
## No need for regexps. See
## http://wiki.nginx.org/NginxHttpGzipModule#gzip_disable
gzip_disable "msie6";

## Serve already compressed files directly, bypassing on-the-fly
## compression.
gzip_static on;

{% if data.get('auth_restricted', False) %}
auth_basic            "Restricted";
auth_basic_user_file  {{data.htaccess}};
{% endif %}

location @rewrite {
  # Some modules enforce no slash (/) at the end of the URL
  # Else this rewrite block wouldn't be needed (GlobalRedirect)
  rewrite ^/(.*)$ /index.php?q=$1;
}

location / {
    index index.php;
    location =/401.html {
        auth_basic off;
    }

    # Drupal 404 from can impact performance. If using a module like
    # search404 then 404's *have *to be handled by Drupal. Uncomment to
    # relay the handling of 404's to Drupal.
    # error_page 404 /index.php;

    # Use index.html whenever there's no index.php.
    # location = / {
    #     error_page 404 =200 /index.html;
    # }

    # Using a nested location is the 'correct' way to use regexes.

    # Regular private file serving (i.e. handled by Drupal).
    location ^~ /system/files/ {
        try_files $uri @rewrite;
        # For not signaling a 404 in the error log whenever the
        # system/files directory is accessed add the line below.
        # Note that the 404 is the intended behavior.
        log_not_found off;
    }

    # Drupal generated image handling, i.e., imagecache in core. See:
    # https://drupal.org/node/371374.
    location ~* /files/styles/ {
        {% if data.get('http_restricted', {}) %}
        auth_basic off;
        {% endif %}
        access_log off;
        expires 30d;
        try_files $uri @rewrite;
    }

    # All static files will be served directly.
    location ~* ^.+\.(?:css|js|jpe?g|gif|htc|ico|png|html|xml|woff|woff2|eot|ttf|svg)$ {
        {% if data.get('http_restricted', {}) %}
        auth_basic off;
        {% endif %}
        access_log off;
        expires 30d;
        # No need to bleed constant updates. Send the all shebang in one
        # fell swoop.
        tcp_nodelay off;
        # Set the OS file cache.
        open_file_cache max=3000 inactive=120s;
        open_file_cache_valid 45s;
        open_file_cache_min_uses 2;
        open_file_cache_errors off;
    }

    # Trying to access private files directly returns a 404.
    location ^~ /sites/default/files/private/ {
        internal;
    }

    # PDFs, office and powerpoint files handling.
    location ~* ^.+\.(?:pdf|ppt|pptx|doc|docx|xls|xlsx|odt|ods|avi|mp4)$ {
        expires 30d;
        # No need to bleed constant updates. Send the all shebang in one
        # fell swoop.
        tcp_nodelay off;
    }

    # want to activate special access to txt files?
    #location ~* ^/sites/default/files/.+\.(?:txt)$ {
    #    {% if data.get('http_restricted', {}) %}
    #    auth_basic off;
    #    {% endif %}
    #    access_log off;
    #    expires 30d;
    #    # No need to bleed constant updates. Send the all shebang in one
    #    # fell swoop.
    #    tcp_nodelay off;
    #    # Set the OS file cache.
    #    open_file_cache max=3000 inactive=120s;
    #    open_file_cache_valid 45s;
    #    open_file_cache_min_uses 2;
    #}

    # Replicate the Apache <FilesMatch> directive of Drupal standard
    # .htaccess. Disable access to any code files. Return a 404 to curtail
    # information disclosure. Hide also the text files.
    location ~* ^(?:.+\.(?:htaccess|make|txt|engine|inc|info|install|module|profile|po|sh|.*sql|theme|twig|yml|tpl(?:\.php)?|xtmpl)|code-style\.pl|/Entries.*|/Repository|/Root|/Tag|/Template|composer\.(json|lock))$ {
        return 404;
    }

    # check maintenance marker on shared NFS directory
    if (-f  $document_root/sites/default/MAINTENANCE) {
        return 503;
    }

    # First we try the URI and relay to the /index.php?q=$uri&$args if not found.
    try_files $uri /index.php?$query_string; # For Drupal >= 7
}

# -------- Security measures --------

# Restrict access to the strictly necessary PHP files. Reducing the
# scope for exploits. Handling of PHP code and the Drupal event loop.
location = /index.php {

    # Security: block ALL non-clean-url direct access t index.php
    # like /index.php?q=/foo
    # if you have some buggy links in your Drupal, comment the internal keyword
    internal;

    include fastcgi_fpm_drupal.conf;
    # ensure gzip/deflate and clear text are stored differently in Varnish
    add_header Vary 'Accept-Encoding';
    fastcgi_pass {{data.nginx.upstream_name}};

    # FastCGI microcache.
    {% if not data.use_microcache %}#{%endif%}include microcache_fcgi.conf;

    # Filefield Upload progress
    # http://drupal.org/project/filefield_nginx_progress support
    # through the NgninxUploadProgress modules.
    # track_uploads uploads 60s;
}

{% if data.drupal_xmlrpc_enabled %}
{% set comment = '' %}
{% else %}
{% set comment = '#' %}
{% endif %}
{{comment}}# XMLRPC. Comment out if not enabled.
{{comment}}location = /xmlrpc.php {
{{comment}}    include fastcgi_fpm_drupal.conf;
{{comment}}}


{% if data.drupal_cron_enabled %}
{% set comment = '' %}
{% else %}
{% set comment = '#' %}
{% endif %}
{{comment}}# Restrict cron access to a specific host.
{{comment}}location = /cron.php {
{{comment}}# If not allowed to run cron then issue a 404 and redirect to the
{{comment}}# site root.
{{comment}}    if ($not_allowed_cron) {
{{comment}}        return 404 /;
{{comment}}    }
{{comment}}    include fastcgi_fpm_drupal.conf;
{{comment}}add_header Vary 'Accept-Encoding';
{{comment}}fastcgi_pass {{data.nginx.upstream_name}};
{{comment}}}

{% if data.drupal_authorize_enabled %}
{% set comment = '' %}
{% else %}
{% set comment = '#' %}
{% endif %}
{{comment}}# Run the update from the web interface with Drupal 7.
{{comment}}location = /authorize.php {
{{comment}}    include fastcgi_fpm_drupal.conf;
{{comment}}add_header Vary 'Accept-Encoding';
{{comment}}fastcgi_pass {{data.nginx.upstream_name}};
{{comment}}}

{% if data.drupal_update_enabled %}
{% set comment = '' %}
{% else %}
{% set comment = '#' %}
{% endif %}
{{comment}}location = /update.php {
{{comment}}    auth_basic "Restricted Access"; # auth realm
{{comment}}    auth_basic_user_file .htpasswd-users; # htpasswd file
{{comment}}    include fastcgi_fpm_drupal.conf;
{{comment}}add_header Vary 'Accept-Encoding';
{{comment}}fastcgi_pass {{data.nginx.upstream_name}};
{{comment}}}

# Statistics tracker
location = /sites/all/modules/mongodb_statistics/mongodb_statistics/tracker.php {
    include fastcgi_fpm_drupal.conf;
    add_header Vary 'Accept-Encoding';
    fastcgi_pass {{data.nginx.upstream_name}};
}

# MONITORING/HEALTH CHECKS
# access to this file is granted for health-checks (should we restrict IP?)
location = /monitor-status.php {
    auth_basic off;
    include fastcgi_fpm_drupal.conf;
    # ensure gzip/deflate and clear text are stored differently in Varnish
    add_header Vary 'Accept-Encoding';
    fastcgi_pass {{data.nginx.upstream_name}};
}

# Disallow access to .git directory: return 404 as not to disclose
# information.
location = /.git {
    return 404;
}

# Disallow access to patches directory.
location = /patches {
    return 404;
}

# Disallow access to drush backup directory.
location = /backup {
    return 404;
}

# Disable access logs for robots.txt.
location = /robots.txt {
    access_log off;
}

# RSS feed support.
location = /rss.xml {
    try_files $uri @rewrite;
}

# XML Sitemap support.
location = /sitemap.xml {
    try_files $uri @rewrite;
}

# Support for favicon. Return a 204 (No Content) if the favicon
# doesn't exist.
location = /favicon.ico {
    try_files /favicon.ico =204;
}

# Any other attempt to access PHP files returns a 404.
# Add "location =" sections for each legacy PHP file
location ~* ^.+\.php$ {
    return 404;
}
